enduse_names=which(names(n_data) %in% c("Service",enduses))
if (length(enduse_names)) n_data=n_data[,enduse_names]
na_inds=which(is.na(r_data$Service))
nilm_days=length(!is.na(n_data$Service))
common_Service_days=nilm_days-length(na_inds)
if (length(na_inds)) {
r_sum=round(sum(r_data$Service[-na_inds]),2)
n_sum=round(sum(n_data$Service[-na_inds]),2)
} else {
r_sum=round(sum(r_data$Service),2)
n_sum=round(sum(n_data$Service) ,2)
}
n_sum_whole=round(sum(n_data$Service),2)
corr=round(100*cor(n_data$Service,r_data$Service,use="pairwise.complete.obs"),1)
sub_meter=round(sum(apply(n_data[,-which(names(n_data)=="time" | names(n_data)=="Service")],2,function(x){sum(x,na.rm=TRUE)})),2)
corr
plot(n_data$Service,r_data$Service)
sub_meter=round(sum(apply(n_data[,-which(names(n_data)=="time" | names(n_data)=="Service")],2,function(x){sum(x,na.rm=TRUE)})),2)
vec=c(site,source,nilm_days,common_Service_days,r_sum,n_sum,n_sum_whole,sub_meter,corr)
vec
cdx("NILM")
source("./Q_total_nrg_use.R")
print(daily_nrg)
print(daily_nrg_inv)
site="12507"
source
source="plotwatt"
inventory=TRUE
print(paste(site,source))
this_list=try(common_nrg_sets(site=site, source=source,inventory=TRUE), silent=TRUE)
(class(this_list)!="try-error")
r_name=paste0("RBSAM_",site)
n_name=paste0(source,"_",site)
r_data=this_list[[r_name]]
n_data=this_list[[n_name]]
enduses=as.character(data_dictionary$Variable[which(data_dictionary$Enduse==1)])
enduse_names=which(names(n_data) %in% c("Service",enduses))
if (length(enduse_names)) n_data=n_data[,enduse_names]
na_inds=which(is.na(r_data$Service))
nilm_days=length(!is.na(n_data$Service))
common_Service_days=nilm_days-length(na_inds)
if (length(na_inds)) {
r_sum=round(sum(r_data$Service[-na_inds]),2)
n_sum=round(sum(n_data$Service[-na_inds]),2)
} else {
r_sum=round(sum(r_data$Service),2)
n_sum=round(sum(n_data$Service) ,2)
}
n_sum_whole=round(sum(n_data$Service),2)
sub_meter=round(sum(apply(n_data[,-which(names(n_data)=="time" | names(n_data)=="Service")],2,function(x){sum(x,na.rm=TRUE)})),2)
corr=round(100*cor(n_data$Service,r_data$Service,use="pairwise.complete.obs"),1)
corr
if (inventory==FALSE) {
check=try(is.list(NILM_list))
if (class(check)=="try-error") load("../NILM_DATA_DELIVERY/Ecotope_Pocessed/NILM_list.rda")
} else {
check=try(is.list(NILM_inv_list))
if (class(check)=="try-error") load("../NILM_DATA_DELIVERY/Ecotope_Pocessed/NILM_inv_list.rda")
}
check=try(is.list(RBSAM_list))
if (class(check)=="try-error") load("../NILM_DATA_DELIVERY/Ecotope_Pocessed/RBSAM_list.rda")
sets=list()
#find relevant data
site_ind=grep(names(RBSAM_list),pattern=paste(site))
kwh_ind=grep(names(RBSAM_list),pattern="kwh")
r_list_ind=intersect(site_ind,kwh_ind)
if (inventory==FALSE) {
n_list_ind=intersect(grep(names(NILM_list),pattern=paste(site)),
grep(names(NILM_list),pattern=paste(source)))
n_data=NILM_list[[n_list_ind]]
} else {
n_list_ind=intersect(grep(names(NILM_inv_list),pattern=paste(site)),
grep(names(NILM_inv_list),pattern=paste(source)))
n_data=NILM_inv_list[[n_list_ind]]
}
r_data=RBSAM_list[[r_list_ind]]
r_data$time=round(r_data$time,"day")
r_data$time=as.POSIXct(r_data$time)
##conver NILm data to daily energy
if (source=="enetics") {
kwh_mult=as.numeric(median(diff(n_data$Date)))/(60*1000)
n_data[,-1]=apply(n_data[,-1],2,function(x){x*kwh_mult})
n_data$Date=substr(as.character((n_data$Date)),1,10)
n_data=aggregate(n_data[,-1],list(n_data$Date),FUN=sum)
n_data$Date=as.POSIXct(n_data$Group.1)
n_data$Group.1=NULL
}
open1=max(min(n_data$Date),min(r_data$time))
open1
close2=min(max(na.omit(n_data$Date),max(na.omit(r_data$time))))
close2
n_data=n_data[which(n_data$Date>=open1 & n_data$Date<=close2),]
r_data=r_data[which(r_data$time>=open1 & r_data$time<=close2),]
r_data=r_data[-which(as.character(r_data$time) %in% setdiff(as.character(r_data$time),as.character(n_data$Date))),]
n_data=n_data[-which(as.character(n_data$Date) %in% setdiff(as.character(n_data$date),as.character(r_data$time))),]
#find relevant data
site_ind=grep(names(RBSAM_list),pattern=paste(site))
kwh_ind=grep(names(RBSAM_list),pattern="kwh")
r_list_ind=intersect(site_ind,kwh_ind)
if (inventory==FALSE) {
n_list_ind=intersect(grep(names(NILM_list),pattern=paste(site)),
grep(names(NILM_list),pattern=paste(source)))
n_data=NILM_list[[n_list_ind]]
} else {
n_list_ind=intersect(grep(names(NILM_inv_list),pattern=paste(site)),
grep(names(NILM_inv_list),pattern=paste(source)))
n_data=NILM_inv_list[[n_list_ind]]
}
r_data=RBSAM_list[[r_list_ind]]
r_data$time=round(r_data$time,"day")
r_data$time=as.POSIXct(r_data$time)
##conver NILm data to daily energy
if (source=="enetics") {
kwh_mult=as.numeric(median(diff(n_data$Date)))/(60*1000)
n_data[,-1]=apply(n_data[,-1],2,function(x){x*kwh_mult})
n_data$Date=substr(as.character((n_data$Date)),1,10)
n_data=aggregate(n_data[,-1],list(n_data$Date),FUN=sum)
n_data$Date=as.POSIXct(n_data$Group.1)
n_data$Group.1=NULL
}
#chop up data into common time periods
open1=max(min(n_data$Date),min(r_data$time))
close2=min(max(na.omit(n_data$Date),max(na.omit(r_data$time))))
n_data=n_data[which(n_data$Date>=open1 & n_data$Date<=close2),]
r_data=r_data[which(r_data$time>=open1 & r_data$time<=close2),]
r_data=r_data[-which(as.character(r_data$time) %in% setdiff(as.character(r_data$time),as.character(n_data$Date))),]
setdiff(as.character(n_data$date),as.character(r_data$time))
setdiff(as.character(n_data$Date),as.character(r_data$time))
as.character(n_data$Date)
as.character(r_data$time)
View(n_data)
View(n_data)
n_data[366]
n_data[366,]
n_data[367,]
n_data[367,]+n_data[368,]
n_data[367,(2:ncol(n_data))]+n_data[368,(2:ncol(n_data))]
site
cdx("NILM")
source("accumlate_recieved_NILM_inventory.R")
cdx("NILM")
source("./Q_total_nrg_use.R")
print(daily_nrg)
print(daily_nrg_inv)
View(daily_nrg)
View(daily_nrg_inv)
cdx("NILM")
deliverable_dictionary=read.xlsx("../data/deliverable/data_dictionary.xlsx",startRow=4,sheetIndex=1)
r_enduses=deliverable_dictionary$enduse_code[which(deliverable_dictionary$units=="Watts")]
site_info=read.csv("../NILM_DATA_DELIVERY/site_info.csv")
site_info=site_info[!duplicated(site_info[,c(1,2)]),]
data_dictionary=read.csv("../NILM_DATA_DELIVERY/data_dictionary.csv")
cdx("NILM")
deliverable_dictionary=read.xlsx("../data/deliverable/data_dictionary.xlsx",startRow=4,sheetIndex=1)
r_enduses=deliverable_dictionary$enduse_code[which(deliverable_dictionary$units=="Watts")]
site_info=read.csv("../NILM_DATA_DELIVERY/site_info.csv")
site_info=site_info[!duplicated(site_info[,c(1,2)]),]
data_dictionary=read.csv("../NILM_DATA_DELIVERY/data_dictionary.csv")
deliverable_dictionary
r_enduses
source="belkin"
site=13336
inventory=FALSE
print(paste(site,source,inventory))
this_list=common_nrg_sets_others_check(site=site, source=source,inventory=inventory)
r_name=paste0("RBSAM_",site)
n_name=paste0(source,"_",site)
r_data=this_list[[r_name]]
n_data=this_list[[n_name]]
site=13336
source="enetics"
site=12063
inventory=FALSE
print(paste(site,source,inventory))
this_list=common_nrg_sets_others_check(site=site, source=source,inventory=inventory)
r_name=paste0("RBSAM_",site)
n_name=paste0(source,"_",site)
r_data=this_list[[r_name]]
n_data=this_list[[n_name]]
site_ind=grep(names(RBSAM_list),pattern=paste(site))
kwh_ind=grep(names(RBSAM_list),pattern="kwh")
r_list_ind=intersect(site_ind,kwh_ind)
if (inventory==FALSE) {
n_list_ind=intersect(grep(names(NILM_list),pattern=paste(site)),
grep(names(NILM_list),pattern=paste(source)))
n_data=NILM_list[[n_list_ind]]
} else {
n_list_ind=intersect(grep(names(NILM_inv_list),pattern=paste(site)),
grep(names(NILM_inv_list),pattern=paste(source)))
n_data=NILM_inv_list[[n_list_ind]]
}
r_data=RBSAM_list[[r_list_ind]]
r_data$time=round(r_data$time,"day")
r_data$time=as.POSIXct(r_data$time)
if (source=="enetics") {
kwh_mult=as.numeric(median(diff(n_data$Date)))/(60*1000)
n_data[,-1]=apply(n_data[,-1],2,function(x){x*kwh_mult})
n_data$Date=substr(as.character((n_data$Date)),1,10)
n_data=aggregate(n_data[,-1],list(n_data$Date),FUN=sum)
n_data$Date=as.POSIXct(n_data$Group.1)
n_data$Group.1=NULL
}
open1=max(min(n_data$Date),min(r_data$time))
close2=min(max(na.omit(n_data$Date),max(na.omit(r_data$time))))
open1
close2
n_data=n_data[which(n_data$Date>=open1 & n_data$Date<=close2),]
r_data=r_data[which(r_data$time>=open1 & r_data$time<=close2),]
r_data=r_data[-which(as.character(r_data$time) %in% setdiff(as.character(r_data$time),as.character(n_data$Date))),]
n_data=n_data[-which(as.character(n_data$Date) %in% setdiff(as.character(n_data$Date),as.character(r_data$time))),]
this_list=common_nrg_sets_others_check(site=site, source=source,inventory=inventory)
r_name=paste0("RBSAM_",site)
n_name=paste0(source,"_",site)
r_data=this_list[[r_name]]
n_data=this_list[[n_name]]
r_data=this_list[[r_name]]
n_data=this_list[[n_name]]
common_nrg_sets_others_check=function(site,source,inventory=FALSE) {
if (inventory==FALSE) {
check=try(is.list(NILM_list))
if (class(check)=="try-error") load("../NILM_DATA_DELIVERY/Ecotope_Pocessed/NILM_list.rda")
} else {
check=try(is.list(NILM_inv_list))
if (class(check)=="try-error") load("../NILM_DATA_DELIVERY/Ecotope_Pocessed/NILM_inv_list.rda")
}
check=try(is.list(RBSAM_list))
if (class(check)=="try-error") load("../NILM_DATA_DELIVERY/Ecotope_Pocessed/RBSAM_list.rda")
sets=list()
#find relevant data
site_ind=grep(names(RBSAM_list),pattern=paste(site))
kwh_ind=grep(names(RBSAM_list),pattern="kwh")
r_list_ind=intersect(site_ind,kwh_ind)
if (inventory==FALSE) {
n_list_ind=intersect(grep(names(NILM_list),pattern=paste(site)),
grep(names(NILM_list),pattern=paste(source)))
n_data=NILM_list[[n_list_ind]]
} else {
n_list_ind=intersect(grep(names(NILM_inv_list),pattern=paste(site)),
grep(names(NILM_inv_list),pattern=paste(source)))
n_data=NILM_inv_list[[n_list_ind]]
}
r_data=RBSAM_list[[r_list_ind]]
r_data$time=round(r_data$time,"day")
r_data$time=as.POSIXct(r_data$time)
##conver NILm data to daily energy
if (source=="enetics") {
kwh_mult=as.numeric(median(diff(n_data$Date)))/(60*1000)
n_data[,-1]=apply(n_data[,-1],2,function(x){x*kwh_mult})
n_data$Date=substr(as.character((n_data$Date)),1,10)
n_data=aggregate(n_data[,-1],list(n_data$Date),FUN=sum)
n_data$Date=as.POSIXct(n_data$Group.1)
n_data$Group.1=NULL
}
#chop up data into common time periods
open1=max(min(n_data$Date),min(r_data$time))
close2=min(max(na.omit(n_data$Date),max(na.omit(r_data$time))))
n_data=n_data[which(n_data$Date>=open1 & n_data$Date<=close2),]
r_data=r_data[which(r_data$time>=open1 & r_data$time<=close2),]
r_data=r_data[-which(as.character(r_data$time) %in% setdiff(as.character(r_data$time),as.character(n_data$Date))),]
#   n_data=n_data[-which(as.character(n_data$Date) %in% setdiff(as.character(n_data$Date),as.character(r_data$time))),]
#   Keep only rbsam names which appear in nilm variables
names(n_data)[which(names(n_data)=="Date")]="time"
#   r_data=r_data[,which(names(r_data) %in%  names(n_data))]
sets[[paste0(source,"_",site)]]=n_data
sets[[paste0("RBSAM_",site)]]=r_data
return(sets)
}
this_list=common_nrg_sets_others_check(site=site, source=source,inventory=inventory)
r_name=paste0("RBSAM_",site)
n_name=paste0(source,"_",site)
r_data=this_list[[r_name]]
n_data=this_list[[n_name]]
summary(n_data)
n_data=n_data[,order(names(n_data))]
r_data=r_data[,order(names(r_data))]
r_data=r_data[,which(names(r_data) %in% r_enduses)]
r_data$hold=as.character(r_data$time)
n_data$hold=as.character(n_data$time)
r_data$time=NULL
r_data$time
summary(r_data)
r_data=this_list[[r_name]]
r_data=r_data[,order(names(r_data))]
r_data=r_data[,which(names(r_data) %in% c(time,r_enduses))]
r_data$hold=as.character(r_data$time)
r_data$time
r_data=this_list[[r_name]]
r_data=r_data[,order(names(r_data))]
r_data=r_data[,which(names(r_data) %in% c("time",r_enduses))]
r_data$hold=as.character(r_data$time)
r_data$time
r_enduses
c("time",r_enduses)
c("time",as.character(r_enduses))
r_data=this_list[[r_name]]
r_data=r_data[,order(names(r_data))]
r_data=r_data[,which(names(r_data) %in% c("time",as.character(r_enduses)))]
r_data$hold=as.character(r_data$time)
n_data$hold=as.character(n_data$time)
r_data$time=NULL
n_data$time=NULL
that=merge(n_data,r_data,by="hold",all=TRUE)
View(that)
nums=sapply(n_data,is.numeric)
r_nums=sapply(r_data,is.numeric)
n_nums=sapply(n_data,is.numeric)
r_nums=sapply(r_data,is.numeric)
apply(n_data[,n_nums],2,function(x){
cor(x=x,y=r_data[,r_nums],use="pairwise.complete.obs"))
})
apply(n_data[,n_nums],2,function(x){
cor(x=x,y=r_data[,r_nums],use="pairwise.complete.obs")
})
x=n_data[,n_nums]
x
x=n_data[,n_nums][,2]
x
summary(r_data[,r_nums])
cor(x=x,y=r_data[,r_nums],use="pairwise.complete.obs")
View(r_data)
names(n_data[,n_nums])
cor_mat=apply(n_data[,n_nums],2,function(x){
cor(x=x,y=r_data[,r_nums],use="pairwise.complete.obs")
})
cor_mat
length(n_data)
names(r_data)[r_nums]
row.names(cor_mat)=names(r_data)[r_nums]
cor_mat
x=cor_mat[,1]
x
max(x)
max(x,na.rm=TRUE)
order(x)
order(x,decreasing=TRUE)
x[order(x,decreasing=TRUE)]
x[order(x,decreasing=TRUE)][1]
apply(cor_mat,2,function(x){
x[order(x,decreasing=TRUE)][1]
})
x[order(x,decreasing=TRUE)][1]
names(x[order(x,decreasing=TRUE)])
names(x[order(x,decreasing=TRUE)])[1]
apply(cor_mat,2,function(x){
names(x[order(x,decreasing=TRUE)])[1]
})
apply(cor_mat,2,function(x){
names(x[order(x,decreasing=TRUE)])[1:3]
})
apply(cor_mat,2,function(x){
names(x[order(x,decreasing=TRUE)])[1:6]
})
cor_mat
cor_mat=apply(n_data[,n_nums],2,function(x){
derp=cor(x=x,y=r_data[,r_nums],use="pairwise.complete.obs")
derp[which(derp<0)]=NA
})
cor_mat
x=n_data[,n_nums][,2]
derp=cor(x=x,y=r_data[,r_nums],use="pairwise.complete.obs")
derp
length(which(derp<0)
)
which(derp<0)
if (length(which(derp<0))) derp[which(derp<0)]=NA
derp
cor_mat=apply(n_data[,n_nums],2,function(x){
derp=cor(x=x,y=r_data[,r_nums],use="pairwise.complete.obs")
if (length(which(derp<0))) derp[which(derp<0)]=NA
})
cor_mat
cor_mat=apply(n_data[,n_nums],2,function(x){
derp=cor(x=x,y=r_data[,r_nums],use="pairwise.complete.obs")
#   if (length(which(derp<0))) derp[which(derp<0)]=NA
})
cor_mat
row.names(cor_mat)=names(r_data)[r_nums]
cor_mat
apply(cor_mat,2,function(x){
names(x[order(x,decreasing=TRUE)])[1]
})
daily_corr=apply(site_info,1,function(x){
site=as.character(x[1])
source=as.character(x[2])
print(paste(site,source,inventory))
this_list=common_nrg_sets_others_check(site=site, source=source,inventory=inventory)
r_name=paste0("RBSAM_",site)
n_name=paste0(source,"_",site)
r_data=this_list[[r_name]]
n_data=this_list[[n_name]]
#only want NILM end uses which accurately identified rbsam devices
#       n_data=n_data[,which(names(n_data) %in%  names(r_data))]
n_data=n_data[,order(names(n_data))]
r_data=r_data[,order(names(r_data))]
r_data=r_data[,which(names(r_data) %in% c("time",as.character(r_enduses)))]
n_nums=sapply(n_data,is.numeric)
r_nums=sapply(r_data,is.numeric)
# x=n_data[,n_nums][,2]
cor_mat=apply(n_data[,n_nums],2,function(x){
derp=cor(x=x,y=r_data[,r_nums],use="pairwise.complete.obs")
#   if (length(which(derp<0))) derp[which(derp<0)]=NA
})
row.names(cor_mat)=names(r_data)[r_nums]
#   apply(cor_mat,2,function(x){
#     names(x[order(x,decreasing=TRUE)])[1]
#
#   })
return(cor_mat)
})
daily_corr
daily_cor_best=lapply(daily_corr,function(x){
best_guesses=apply(x,2,function(y){
names(y[order(y,decreasing=TRUE)])[1]
})
return(best_guesses)
})
daily_cor_best
x=daily_corr[[13]]
x
best_guesses=apply(x,2,function(y){
names(y[order(y,decreasing=TRUE)])[1]
})
best_guesses
x=y[,1]
x
y=x[,1]
y
names(y[order(y,decreasing=TRUE)])[1]
best_guesses=apply(x,2,function(y){
names(y[order(y,decreasing=TRUE)])[1]
})
best_guesses
y=x[,1]
y
names(y[order(y,decreasing=TRUE)])[1]
daily_cor_best=lapply(daily_corr,function(x){
best_guesses=apply(x,2,function(y){
names(y[order(y,decreasing=TRUE)])[1]
})
return(best_guesses)
})
daily_cor_best
apply(site_info,1,function(x){
site=as.character(x[1])
source=as.character(x[2])
gname=paste(site,source)
})
cor_names=apply(site_info,1,function(x){
site=as.character(x[1])
source=as.character(x[2])
gname=paste(site,source)
})
cor_names
names(daily_corr)=cor_names
daily_corr
names(daily_cor_best)=cor_names
daily_cor_best
daily_corr
daily_cor_best
unlist(daily_cor_best)
unlist(daily_cor_best,use,names=FALSE)
unlist(daily_cor_best,usenames=FALSE)
unlist(daily_cor_best,use.names=FALSE)
unlist(daily_cor_best)
this=unlist(daily_cor_best)
head(this)
names(this)
cor_names=apply(site_info,1,function(x){
site=as.character(x[1])
source=as.character(x[2])
gname=paste(site,source,sep=".")
})
names(daily_corr)=cor_names
names(daily_cor_best)=cor_names
this=unlist(daily_cor_best)
this
this=dataframe(unlist(daily_cor_best))
this=data.frame(unlist(daily_cor_best))
this
daily_cor_best_val=lapply(daily_corr,function(x){
best_guesses=apply(x,2,function(y){
y[order(y,decreasing=TRUE)][1]
})
return(best_guesses)
})
daily_cor_best_val
names(daily_cor_best_val)=cor_names
cor_names=data.frame(unlist(daily_cor_best))
cor_vals=data.frame(unlist(daily_cor_best_val))
cor_names
cor_vals
cor_fin=merge(cor_names,cor_vals)
cor_fin
cor_names
cor_vals
cor_names
cor_vals=data.frame(unlist(daily_cor_best_val))
cor_vals
names(cor_vals)
cor_names$id=rownames(cor_names)
cor_names
cor_vals$id=rownames(cor_vals)
cor_fin=merge(cor_names,cor_vals,by="id")
cor_fin
rownames(cor_fin)=NULL
cor_fin
View(cor_fin)
names(cor_fin)=c("id","Best Assignment","Correlation")
View(cor_fin)
write.xlsx(cor_fin,"../Report/NILM_results.xlsx",row.names=FALSE,sheetName="closest_correlation",append=TRUE)
setwd("//fileserver/RBSA_secure/NEEA/2013_Non-Intrusive_Load_Monitoring_40971/data_and_analysis/code/NILM_RBSAM_GUI")
shinyapps::deployApp()
